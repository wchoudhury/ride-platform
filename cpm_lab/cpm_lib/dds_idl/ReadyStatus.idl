#include "TimeStamp.idl"

#ifndef READYSTATUS_IDL
#define READYSTATUS_IDL

/**
 * \struct ReadyStatus
 * \brief Ready signals sent from all participants in the network, e.g. HLCs and vehicles. 
 * 
 * These signals fulfill two purposes:
 * 
 * 1) Send a "ready" message that indicates that the computation can begin, meaning that the initialization of the participant is completed. 
 *      The field source_id is used to uniquely identify the sender of the ready message, so that, before a "start" signal is sent, 
 *      it can be assured that all participants are ready to start with the calculation.
 * 
 *      Real time mode: The field next_start_stamp can either have an arbitrary value.
 *      Simulated time mode: The field next_start_stamp must contain the initial simulated point in time of the participant's computation, i.e. the offset.
 * 
 * 2) After a start signal has been received, ReadyStatus is only used in combination with simulated time: 
 *      After a participant completes a computation step, it indicates in the field "next_start_stamp" its next expected trigger start time. 
 *      The participant waits for a SystemTrigger that matches its next_start_stamp before any further computation is performed.
 * \ingroup cpmlib_idl
 */
struct ReadyStatus {
    //! Sender ID To uniquely identify the sender of a ReadyStatus message - used to count all participants and to check if a participant sent an answer after it received a SystemTrigger for a TimeStamp that it registered.
    string source_id;

    //! The point in time when the sender should be triggered again (if simulated time is used). Else: An arbitrary value to show that the participant is ready to start with the computation.
    TimeStamp next_start_stamp;
};
#endif